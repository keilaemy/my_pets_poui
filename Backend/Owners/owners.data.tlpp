/**
 * @ Author: Keila Emy Taniguchi
 * @ Create Time: 2024-04-07 22:45:52
 * @ Description: Projeto POUI TOTVS
 */

#include "tlpp-core.th"
#include "FWMVCDEF.CH"

namespace owners //identificação do fonte

//FWAdapterBaseV2: Classe base para criação de adapters utilizados em serviços REST 
//suportando filtros de paginação e filtros baseados no padrão oData.
//https://tdn.totvs.com/display/public/framework/09.+FWAdapterBaseV2

Class OwnersData From FWAdapterBaseV2 

    Public method new() as Object
    Public method get()
    Public method handleOwners() as Logical
    Public method setHashFields()

EndClass

Method new(cVerb as Character) as Object Class OwnersData

    //Método construtor da classe
    _Super:new(cVerb,.T.) //Parametros: Verbo Rest utilizado no adapter; Se irá listar o json

Return Self

Static Function AddMapFields(oSelf as Object)

    //Adiciona campo a campo as configurações de campos utilizado no Adapter
    oSelf:AddMapFields("id"   , "ZSB_ID"   , .T.,.T.,{"ZSB_ID"   , "C", tamsx3('ZSB_ID')[1]   , 0})
    oSelf:AddMapFields("name" , "ZSB_NAME" , .T.,.F.,{"ZSB_NAME" , "C", tamsx3('ZSB_NAME')[1] , 0})
    oSelf:AddMapFields("rg"   , "ZSB_RG"   , .T.,.F.,{"ZSB_RG"   , "C", tamsx3('ZSB_RG')[1]   , 0})
    oSelf:AddMapFields("cpf"  , "ZSB_CPF"  , .T.,.F.,{"ZSB_CPF"  , "C", tamsx3('ZSB_CPF')[1]  , 0})
    oSelf:AddMapFields("email", "ZSB_EMAIL", .T.,.F.,{"ZSB_EMAIL", "C", tamsx3('ZSB_EMAIL')[1], 0})
    oSelf:AddMapFields("tel1" , "ZSB_TEL1" , .T.,.F.,{"ZSB_TEL1" , "C", tamsx3('ZSB_TEL1')[1] , 0})
    oSelf:AddMapFields("tel2" , "ZSB_TEL2" , .T.,.F.,{"ZSB_TEL2" , "C", tamsx3('ZSB_TEL2')[1] , 0})

    //Parametros AddMapFields:
    //1 - cFieldJson	Carácter	Nome do campo no objeto Json
    //2 - cFieldQuery	Carácter	Nome do campo que será utilizado no ResultSet
    //3 - lJsonField	Lógico	    Se .T. informa que o campo será exportado ao Json
    //4 - lFixed        Lógico	    Se .T. informa que o campo não pode ser removido pelo FIELDS do QueryParam
    //5 - aStruct       Array	    Vetor com a estrutura do campo no padrão {"CAMPO", "TIPO", Tamanho, Decimal}, caso não seja informada a estrutura, utiliza como base o dicionário SX3
    //6 - cRenameField	Carácter	Determina o nome real do campo na tabela, para o caso de identificadores ambíguos na query

Return Nil

//nPage - Pagina a ser retornada; nPageSize quantidade de registros por pagina; 
//cFilter queryParam dos Filter; cFields campos; cSort ordem; cOwnerId retorno pelo Id;
Method get(nPage as Numeric, nPageSize as Numeric, cFilter as Character,;
           cFields as Character, cSort as Character, cOwnerId as Character) Class OwnersData

    Local aArea as Array
    Local cWhere as Character
    Local aFilter as Array
    aFilter := {}

    if Empty(cOwnerId)
        cWhere := " ZSB_FILIAL = '" + FWXFilial('ZSB') + "' AND D_E_L_E_T_ = '' "
    else
        cWhere :=  " ZSB_ID = '" +cOwnerId+ "' AND ZSB_FILIAL = '" + FWXFilial('ZSB') + "' AND D_E_L_E_T_ = '' "
    endif

    aArea := FWGetArea()

    AddMapFields(self) //DePara campos

    if !Empty(cFilter)
        aAdd(aFilter,{'FILTER',cFilter})
        ::SetUrlFilter(aFilter) //Propriedade do FWAdapterBaseV2
    endif

    if !Empty(cFields)
        ::SetFields(cFields)
    endif

    if !Empty(cSort)
        ::SetOrderQuery(cSort)
    endif

    //Chamada de Metodos da Classe da FWAdapterBaseV2
    ::SetPage(nPage)
    ::SetPageSize(nPageSize)
    ::SetQuery(utils.getQuery('ZSB'))
    ::SetWhere(cWhere)
    ::SetOrder('ZSB_FILIAL','ZSB_ID')

    if ::Execute() //Realiza o parse dos ids #QueryFields# e #QueryWhere# gerando o ResultSet
        ::FilGetResponse() //Método chamado linha a linha do ResultSet para geração do Json
    endif

    RestArea( aArea )
	aSize( aArea, 0 )

Return Nil

Method handleOwners(nOperation as Numeric, jBody as Json, cOwnerId as Character) as Logical Class OwnersData
    Local oModel	as Object
	Local oModelZSB	as Object
    Local lRet as Logical
    Local aData as Array
    
    lRet := .T.
    ::setHashFields()

    If nOperation <> 5
        aData := utils.u_buildData(jBody, self)
	Endif

    If nOperation <> 3
        If !utils.u_searchRecord(cOwnerId, 'ZSB')
            lRet := .F.
            Return SetResponse(lRet)
        EndIf
    EndIf

    oModel := FWLoadModel("MPETS002")
    oModelZSB := oModel:GetModel("ZSBMASTER")
    utils.u_setOperationModel(oModel, nOperation)

    oModel:Activate()
    If oModel:IsActive()
        If oModel:GetOperation() <> MODEL_OPERATION_DELETE
            lRet := utils.u_setValue(aData, oModelZSB, 'ZSB')
		Endif
    Else
        lRet := .F.        
    EndIf

    If !lRet .Or. !( oModel:VldData() .And. oModel:CommitData() )
		lRet := .F.
        SetRestFault(400, utils.u_getError(oModel:GetErrorMessage()))
	Endif

	oModel:DeActivate()
	FreeObj(oModelZSB)
	FreeObj(oModel)
Return SetResponse(lRet)

Static Function SetResponse(lRet as Logical) as Json //Retorno Json
    Local jResponse as Json

    If lRet
        jResponse := JsonObject():New()

        jResponse['id'] := RTrim(ZSB->ZSB_ID)
        jResponse['name'] := FwHttpEncode(RTrim(ZSB->ZSB_NAME))
        jResponse['rg'] := RTrim(ZSB->ZSB_RG)
        jResponse['cpf'] := RTrim(ZSB->ZSB_CPF)
        jResponse['email'] := FwHttpEncode(RTrim(ZSB->ZSB_EMAIL))
        jResponse['tel1'] := RTrim(ZSB->ZSB_TEL1)
        jResponse['tel2'] := RTrim(ZSB->ZSB_TEL2)
    EndIf
Return jResponse
